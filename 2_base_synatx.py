#   Библиотеки 
import time
import random
import typing
a, b, c, d, f, q = 0
#   Основные типи и структуры //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

types = [
    None, # Значение ничего
    True,False, bool,
    1,  int, # Целое число
    5 + 1j, complex, # 5-Pеальное часть, 1-Воображаемая часть, j-Символ воображаемой единицы
    1.1,  float, # Число с плавающей запятой
    ' ', " ", """ """, f'', r'', str, #
    b'',  bytes, # Байт
    [], list, # Список 
    (),  tuple, # Кортеж
    {1, },  set, # Множество
    { },  dict # Словарь
    ]

# Основные операторы /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

_ = 1 + 2
_ = 1 - 2
_ = 1 * 2
_ = 1 ** 2
_ = 1 / 2
_ = 1 // 2
_ = 1 % 2 
_ = 1 and 2
_ = 1 or 2
print(a is b), ' Вернет True False'
_ = 1 > 2
_ = 1 >= 2
_ = 1 < 2
_ = 1 <= 2

# Тернарный оператор /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

python = True
name = 'Serhii' if python else 'No name'

python = None
name = python or 'Python', ' Быстрая проверка переменной'

# Оператор Match //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

fruits = ('banana', 'orange') , 'Поиск подходящего шаблона, если нету выполняеться заглушка'
match fruits: 
    case 'banana', 'orange':
        print(f'Banana')
    case _:
        pass

pets = ['cat', 'dog', 'fish']
match pets:
    case[_,_,'fish']:
        print(f'DOG,CAT,FISH')





#   Comprehensions ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

a = [i for i in types]
b = (i for i in types)
c = {i for i in types if isinstance(i, typing.Hashable)}
d = {str(i): i for i in types}

#   Присваивание, распаковка, срезы /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
b, *_ = b[1,2,3] , ' Распаковка словаря[b = 1, остальное игнорируеться]'
e, *f, g = [3,'a', 'q', 'z'], 'Распаковка словаря[e = 3/ f = a,q / g = z]'
h = [*f]
_ = [1, 2, 3][:]

_ = {**{}} ,   'Распаковка Словаря в другой словарь '

#   Утверждение assert  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

assert h, 'test'


#   Цикл While ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

while a:
    a.pop()

while a:
    break
else:
    pass






